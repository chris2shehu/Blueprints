blueprint:
  name: Arrival & Departure Announcements Google TTS
  description: Use Google TTS to announce when a person arrives or departs from a zone
  domain: automation

input:
  # Person (Single Selection)
  person:
    name: Person
    description: "Person to trigger TTS on"
    selector:
      entity:
        domain: person

  # Zone
  zone:
    name: Zone
    description: "Zone to trigger TTS on"
    selector:
      entity:
        domain: zone

  # Media Player (Single Selection)
  media_player:
    name: Media Player
    description: "Device to speak through"
    selector:
      entity:
        domain: media_player

  # Arrival Message
  arrival_message:
    name: Arrival Message
    description: "Type your arrival message here. Use {name} to insert the person's name."
    default: "{name} has arrived at the zone!"
    selector:
      text:
        multiline: true

  # Departure Message
  departure_message:
    name: Departure Message
    description: "Type your departure message here. Use {name} to insert the person's name."
    default: "{name} has left the zone."
    selector:
      text:
        multiline: true

trigger:
  - platform: zone
    entity_id: !input person
    zone: !input zone
    event: enter
  - platform: zone
    entity_id: !input person
    zone: !input zone
    event: leave

condition: []

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.event == 'enter' }}"
        sequence:
          - service: tts.cloud_say
            target:
              entity_id: !input media_player
            data:
              cache: false
              message: "{{ arrival_message | replace('{name}', state_attr(trigger.entity_id, 'friendly_name') or trigger.entity_id) }}"
      - conditions:
          - condition: template
            value_template: "{{ trigger.event == 'leave' }}"
        sequence:
          - service: tts.cloud_say
            target:
              entity_id: !input media_player
            data:
              cache: false
              message: "{{ departure_message | replace('{name}', state_attr(trigger.entity_id, 'friendly_name') or trigger.entity_id) }}"

mode: queued
max: 10
